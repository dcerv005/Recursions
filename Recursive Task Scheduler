import timeit
tasks= [
    {"id": 1, "name": "Task 1", "subtasks":[], "priority": 1},
    {"id": 2, "name": "Task 2", "subtasks":["Task 2.1", "Task 2.2"], "priority": 3},
    {"id": 3, "name": "Task 3", "subtasks":[], "priority": 2}
]
def task_hierarchy(arr):
  
    if len(arr) > 1:
        mid = len(arr)//2
        left_half= arr[:mid]
        right_half= arr[mid:]


        task_hierarchy(left_half)
        task_hierarchy(right_half)

        i=j=k=0


        while i < len(left_half) and j < len(right_half):
            if left_half[i]["priority"] < right_half[j]["priority"]:
                arr[k] = left_half[i]
                i +=1
            else: 
                arr[k] = right_half[i]
                j += 1
            k += 1
        
        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            j += 1
        
        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1


        return arr
               
        
    
        
    
    
def schedule_tasks(tasks):
    print("Tasks in order of priority:")
    for task in tasks:
        print(task["name"])
    
 
time= timeit.timeit(lambda: schedule_tasks(task_hierarchy(tasks)), number=1)    #$O(n log n)$  space complexity O(n)

print(time)
